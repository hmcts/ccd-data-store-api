plugins {
    id 'application'
    id 'jacoco'
    id 'idea'
    id 'eclipse'
    id 'org.springframework.boot' version '3.4.1'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.sonarqube' version '6.0.1.5171'
    id 'com.github.kt3k.coveralls' version '2.12.2'
    id 'com.github.spacialcircumstances.gradle-cucumber-reporting' version '0.1.25'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.9'
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'uk.gov.hmcts.java' version '0.12.63'
    id 'au.com.dius.pact' version '4.6.16'
    id 'org.jsonschema2pojo' version '1.2.2'
    id 'org.owasp.dependencycheck' version '11.1.1'
}

apply from: './gradle/suppress.gradle'


ext {
    set('springCloudVersion', '2024.0.0')
    set('spring-framework.version', '6.2.1')
    set('spring-security.version', '6.4.2')
    set('log4j2.version', '2.24.3')
    set('jacksonVersion', '2.19.2')
    set('snakeyaml.version', '2.2')
    elasticsearchVersion = '9.1.2'
    junit = '5.11.4'
    junitPlatform = '1.11.4'
    appInsightsVersion = '2.6.4'
    pactProviderVersion = '4.6.16'
    lombokVersion = '1.18.36'
    lombokBindingVersion = '0.2.0'
    mockito = '5.15.2'
    testContainersVersion = '1.20.4'
    cucumber = '6.6.1'
    beftaFwVersion = '9.2.4'
    ccdTestDefinitionVersion = '7.25.4'
    limits = [
            'instruction': 90,
            'branch'     : 85,
            'line'       : 90,
            'complexity' : 88,
            'method'     : 90,
            'class'      : 98
    ]
}

dependencyUpdates.resolutionStrategy = {

    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

dependencyCheck {
    suppressionFile = 'dependency-check-suppressions.xml'
}

application {
    mainClass = 'uk.gov.hmcts.ccd.CoreCaseDataApplication'
}

sourceSets {
    aat {
        java {
            srcDir('src/aat/java')
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDir('src/aat/resources')
        }
    }

    contractTest {
        java {
            srcDir('src/contractTest/java')
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDir('src/contractTest/resources')
        }
    }
}

// tag::repositories[]
repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "AzureArtifacts"
        url = uri("https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1")
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

group 'uk.gov.hmcts.ccd'

bootJar {
    archiveFileName = 'core-case-data'
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    archiveFileName = 'core-case-data.jar'
}

configurations {
    providedRuntime
    annotationProcessor
    mockitoAgent

    aatImplementation.extendsFrom(testImplementation)
    aatRuntimeOnly.extendsFrom(testRuntimeOnly)
    aatAnnotationProcessor.extendsFrom(annotationProcessor)
    contractTestImplementation.extendsFrom(testImplementation)
    contractTestRuntimeOnly.extendsFrom(testRuntimeOnly)
    contractTestAnnotationProcessor.extendsFrom(annotationProcessor)
    cucumberRuntime.extendsFrom(functionalRuntime)
    cucumberImplementation.extendsFrom(functionalImplementation)

    all.collect { configuration ->
        configuration.exclude group: 'org.apache.logging.log4j', module: 'log4j-to-slf4j'
    }
}

//This is to exclude generated files from build/generated-sources/js2p/uk/gov/hmcts/ccd/domain/types/sanitiser/document
tasks.withType(Checkstyle) {
    exclude 'uk/gov/hmcts/ccd/domain/types/sanitiser/document/**'
}

tasks.withType(Test) {
    maxParallelForks = System.getenv('MAX_NUM_PARALLEL_THREADS') ?: 6 as int

    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }
}

ext.libraries = [
  junit5: [
    "org.junit.jupiter:junit-jupiter-api:${junit}",
    "org.junit.jupiter:junit-jupiter-engine:${junit}",
    "org.junit.jupiter:junit-jupiter-params:${junit}",
    "org.junit.platform:junit-platform-commons:${junitPlatform}",
    "org.junit.platform:junit-platform-engine:${junitPlatform}",
    "org.apiguardian:apiguardian-api:1.1.2"
  ]
]

dependencies {

    // start::CVE Vulnerability dependency overrides                                                // MAIN PARENT DEPENDEDNCY

    implementation group: 'com.auth0', name: 'java-jwt', version: '4.4.0'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.11.0'                   // java-property-to-json
    implementation group: 'com.google.guava', name: 'guava', version: '33.4.0-jre'                  // java-property-to-json
    implementation group: 'com.jayway.jsonpath', name: 'json-path', version: '2.9.0'                // spring-hateoas
    implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '10.0.1'                // spring-security-oauth2-jose
    runtimeOnly group: 'com.zaxxer', name: 'HikariCP', version: '6.2.1'                             // spring-boot-starter-data-jpa
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.16'                 // applicationinsights-logging-logback
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.16'              // applicationinsights-logging-logback
    implementation group: 'commons-beanutils', name: 'commons-beanutils', version: '1.10.0'         // commons-validator
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'          // feign-form-spring
    implementation group: 'commons-io', name: 'commons-io', version: '2.18.0'                       // spring-cloud-starter-openfeign
    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '13.5'          // spring-cloud-starter-openfeign
    implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.5'             // service-auth-provider-java-client
    implementation group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '3.8.0'   // spring-cloud-starter-openfeign
    implementation group: 'jakarta.inject', name: 'jakarta.inject-api', version: '2.0.1'            // spring-boot-starter-data-jpa
    implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '3.1.0'  // spring-boot-starter-data-jpa  (held at 3.1.0 due to methods with same signature getSchemaManager())
    implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.1.0'          // service-auth-provider-java-client
    implementation group: 'net.minidev', name: 'json-smart', version: '2.5.1'                       // spring-security-oauth2-client
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'            // java-property-to-json
    implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.6.4.Final'       // spring-boot-starter-data-jpa

    testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.0'             // ccd-test-definitions
    testImplementation group: 'org.json', name: 'json', version: '20250107'                         // ccd-test-definitions
    testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.27.2'                // spring-cloud-starter-contract-stub-runner
    testImplementation group: 'org.mockito', name: 'mockito-core', version: mockito                 // spring-cloud-starter-contract-stub-runner
    testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: mockito        // spring-boot-starter-test

    // end::CVE Vulnerability dependency overrides

    // Lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: lombokBindingVersion
    testCompileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    testAnnotationProcessor group: 'org.projectlombok', name: 'lombok-mapstruct-binding', version: lombokBindingVersion

    // Spring
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
    implementation group: 'org.springframework.hateoas', name: 'spring-hateoas'
    implementation group: 'org.springframework.plugin', name: 'spring-plugin-core'
    implementation group: 'org.springframework.retry', name: 'spring-retry'
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client'
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server'
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-core'
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose'
    implementation group: 'org.springframework.security', name: 'spring-security-core'
    implementation group: 'org.springframework.security', name: 'spring-security-config'
    implementation group: 'org.springframework.security', name: 'spring-security-web'
    implementation group: 'org.springframework.security', name: 'spring-security-crypto'
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.1'

    // HMCTS
    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
    implementation group: 'com.github.hmcts', name: 'idam-java-client', version: '3.0.3'
    implementation group: 'com.github.hmcts', name: 'ccd-case-document-am-client', version: '1.59.2'
    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.6'

    implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '3.1.8'
    implementation group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: appInsightsVersion
    implementation group: 'com.microsoft.azure', name: 'applicationinsights-spring-boot-starter', version: appInsightsVersion
    implementation group: 'com.sun.mail', name: 'mailapi', version: '2.0.1'
    implementation group: 'com.vladmihalcea', name: 'hibernate-types-60', version: '2.21.1'
    implementation group: 'commons-validator', name: 'commons-validator', version: '1.9.0'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.12.6'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.12.6'
    implementation group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.12.6'
    implementation group: 'io.searchbox', name: 'jest', version: '6.3.1'
    implementation group: 'io.vavr', name: 'vavr', version: '0.10.5'
    implementation group: 'org.apache.commons', name: 'commons-jexl3', version: '3.4.0'
    implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.4.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.24.3'

    implementation (group: 'org.elasticsearch', name: 'elasticsearch', version: elasticsearchVersion) {
        exclude group: 'org.apache.logging.log4j', module: 'log4j-api'
    }
    implementation group: 'co.elastic.clients', name: 'elasticsearch-java', version: elasticsearchVersion
    implementation group: 'org.elasticsearch.client', name: 'elasticsearch-rest-client', version: elasticsearchVersion

    implementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"

    implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.5.13'
    implementation group: 'org.jooq', name: 'jool-java-8', version: '0.9.15'
    implementation group: 'org.mapstruct', name: 'mapstruct', version: '1.6.3'
    implementation group: 'pl.jalokim.propertiestojson', name: 'java-properties-to-json', version: '5.3.0'

    annotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.6.3'
    testAnnotationProcessor group: 'org.mapstruct', name: 'mapstruct-processor', version: '1.6.3'
    runtimeOnly group: 'org.postgresql', name: 'postgresql', version: '42.5.6'

    // TEST DEPENDENCIES
    testImplementation libraries.junit5
    testImplementation libs.mockito
    mockitoAgent(libs.mockito) {
        transitive = false;
    }
    testImplementation group: 'com.opentable.components', name: 'otj-pg-embedded', version: '1.1.0'
    testImplementation group: 'com.xebialabs.restito', name: 'restito', version: '1.1.2'
    testImplementation group: 'org.assertj', name: 'assertj-vavr', version: '0.4.3'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-contract-stub-runner', version: '4.1.4'
    testImplementation group: 'org.testcontainers', name: 'testcontainers', version: testContainersVersion
    testImplementation group: 'org.testcontainers', name: 'postgresql', version: testContainersVersion
    testImplementation group: 'org.testcontainers', name: 'elasticsearch', version: testContainersVersion
    testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: testContainersVersion
    testImplementation group: 'org.openid4java', name: 'openid4java', version: '1.0.0' // for sonar analysis
    testImplementation group: 'com.github.hmcts', name: 'ccd-test-definitions', version: ccdTestDefinitionVersion
    testImplementation group: 'com.github.hmcts', name: 'befta-fw', version: beftaFwVersion
    testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.9', classifier: 'all'
    testImplementation "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"
    testImplementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    testImplementation "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"

    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: pactProviderVersion
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: pactProviderVersion
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: pactProviderVersion
    contractTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    aatAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    cucumberRuntime group: 'io.cucumber', name: 'cucumber-java', version: cucumber
    cucumberRuntime group: 'io.cucumber', name: 'cucumber-junit', version: cucumber
    cucumberRuntime group: 'io.cucumber', name: 'cucumber-junit-platform-engine', version: cucumber
}
// end::dependencies[]

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

pitest {

    targetClasses = ['uk.gov.hmcts.ccd.config.*',
                     'uk.gov.hmcts.ccd.AuthCheckerConfiguration',
                     'uk.gov.hmcts.ccd.exception.*',
                     'uk.gov.hmcts.ccd.infrastructure.*',
                     'uk.gov.hmcts.ccd.data.*',
                     'uk.gov.hmcts.ccd.domain.*']

    targetTests = ['uk.gov.hmcts.ccd.config.*',
                   'uk.gov.hmcts.ccd.AuthCheckingConfigurationTest',
                   'uk.gov.hmcts.ccd.infrastructure.user.*',
                   'uk.gov.hmcts.ccd.data.caseaccess.[!DefaultCaseUserRepositoryTest].*',
                   'uk.gov.hmcts.ccd.data.casedetails.query.*',
                   'uk.gov.hmcts.ccd.data.casedetails.search.*',
                   'uk.gov.hmcts.ccd.data.casedetails.[!CaseAuditEventRepositoryTest].*',
                   'uk.gov.hmcts.ccd.data.casedetails.[!DefaultCaseDetailsRepositoryTest].*',
                   'uk.gov.hmcts.ccd.data.definition.CachedCaseDefinitionRepositoryTest',
                   'uk.gov.hmcts.ccd.data.draft.*',
                   'uk.gov.hmcts.ccd.data.JSONBConverterTest',
                   'uk.gov.hmcts.ccd.data.SecurityUtilsTest',
                   'uk.gov.hmcts.ccd.domain.model.*',
                   'uk.gov.hmcts.ccd.domain.service.aggregated.*',
                   'uk.gov.hmcts.ccd.domain.service.callbacks.CallbackServiceTest',
                   'uk.gov.hmcts.ccd.domain.service.caseaccess.*',
                   'uk.gov.hmcts.ccd.domain.service.common.*',
                   'uk.gov.hmcts.ccd.domain.service.createcase.*',
                   'uk.gov.hmcts.ccd.domain.service.createevent.*',
                   'uk.gov.hmcts.ccd.domain.service.getcase.*',
                   'uk.gov.hmcts.ccd.domain.service.getdraft.*',
                   'uk.gov.hmcts.ccd.domain.service.getevents.*',
                   'uk.gov.hmcts.ccd.domain.service.search.*',
                   'uk.gov.hmcts.ccd.domain.service.startevent.*',
                   'uk.gov.hmcts.ccd.domain.service.stdapi.CallbackInvokerTest',
                   'uk.gov.hmcts.ccd.domain.service.stdapi.PrintableDocumentListOperationTest',
                   'uk.gov.hmcts.ccd.domain.service.upsertdraft.*',
                   'uk.gov.hmcts.ccd.domain.service.validate.*',
                   'uk.gov.hmcts.ccd.domain.types.sanitiser.client.*',
                   'uk.gov.hmcts.ccd.domain.types.sanitiser.*',
                   'uk.gov.hmcts.ccd.domain.types.[!CaseDataValidatorTest].*',
                   'uk.gov.hmcts.ccd.test.*',
                   'uk.gov.hmcts.ccd.v2.external.controller.[!CaseControllerTestIT].*',
                   'uk.gov.hmcts.ccd.v2.external.controller.[!DocumentControllerITest].*',
                   'uk.gov.hmcts.ccd.v2.external.controller.[!StartTriggerControllerCaseRolesIT].*',
                   'uk.gov.hmcts.ccd.v2.internal.controller.[!UICaseControllerCaseRolesIT].*',
                   'uk.gov.hmcts.ccd.v2.internal.controller.[!UIStartTriggerControllerCaseRolesIT].*',
                   'uk.gov.hmcts.ccd.v2.external.resource.*',
                   'uk.gov.hmcts.ccd.v2.internal.resource.*'
    ]
    excludedClasses = ['uk.gov.hmcts.ccd.CoreCaseDataApplication',
                       'uk.gov.hmcts.ccd.PersistenceIT',
                       'uk.gov.hmcts.ccd.v2.external.controller.TestingSupportController'
    ]

    enableDefaultIncrementalAnalysis = true
    historyInputLocation = 'build/reports/pitest/fastermutationtesting'
    historyOutputLocation = 'build/reports/pitest/fastermutationtestingoutput'
    threads = 15
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    fileExtensionsToFilter.addAll('xml','json')
    outputFormats = ['XML', 'HTML','CSV']
    mutationThreshold = 4
    coverageThreshold = 4
    features = ["+CLASSLIMIT(limit[15])"]
    jvmArgs = ['-Xms1G','-Xmx3G']
    timestampedReports = false
    failWhenNoMutations = false
    detectInlinedCode = true

}

project.tasks['pitest'].group = "Verification"

task projectVersion {
    description 'Prints the version of this project; used for publishing JAR file'
    doLast {
        print project.version
    }
}

// copied from https://github.com/joelittlejohn/jsonschema2pojo/tree/master/jsonschema2pojo-gradle-plugin
// Note A problem was found with the configuration of task ':generateJsonSchema2Pojo'.
// Registering invalid inputs and outputs via TaskInputs and TaskOutputs methods has been deprecated
// and is scheduled to be removed in Gradle 5.0.
jsonSchema2Pojo {

    // Whether to allow 'additional' properties to be supported in classes by adding a map to
    // hold these. This is true by default, meaning that the schema rule 'additionalProperties'
    // controls whether the map is added. Set this to false to globabally disable additional properties.
    includeAdditionalProperties = true

    // Whether to generate builder-style methods of the form withXxx(value) (that return this),
    // alongside the standard, void-return setters.
    generateBuilders = false

    // Whether to use primitives (long, double, boolean) instead of wrapper types where possible
    // when generating bean properties (has the side-effect of making those properties non-null).
    usePrimitives = false

    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    source = files("${sourceSets.main.output.resourcesDir}/schema")

    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.
    targetDirectory = file("${project.buildDir}/generated-sources/js2p")

    // Package name used for generated Java classes (for types where a fully qualified name has not
    // been supplied in the schema using the 'javaType' property).
    targetPackage = 'uk.gov.hmcts.ccd.domain.types.sanitiser.document'

    // The characters that should be considered as word delimiters when creating Java Bean property
    // names from JSON property names. If blank or not set, JSON properties will be considered to
    // contain a single word when creating Java Bean property names.
    propertyWordDelimiters = [] as char[]

    // Whether to use the java type long (or Long) instead of int (or Integer) when representing the
    // JSON Schema type 'integer'.
    useLongIntegers = false

    // Whether to use the java type BigInteger when representing the JSON Schema type 'integer'. Note
    // that this configuration overrides useLongIntegers
    useBigIntegers = false

    // Whether to use the java type double (or Double) instead of float (or Float) when representing
    // the JSON Schema type 'number'.
    useDoubleNumbers = true

    // Whether to use the java type BigDecimal when representing the JSON Schema type 'number'. Note
    // that this configuration overrides useDoubleNumbers
    useBigDecimals = false

    // Whether to include hashCode and equals methods in generated Java types.
    includeHashcodeAndEquals = true

    // Whether to include a toString method in generated Java types.
    includeToString = true

    // The style of annotations to use in the generated Java types. Supported values:
    //  - jackson (alias of jackson2)
    //  - jackson2 (apply annotations from the Jackson 2.x library)
    //  - jackson1 (apply annotations from the Jackson 1.x library)
    //  - gson (apply annotations from the Gson library)
    //  - moshi1 (apply annotations from the Moshi 1.x library)
    //  - none (apply no annotations at all)
    annotationStyle = 'jackson'

    // A fully qualified class name, referring to a custom annotator class that implements
    // org.jsonschema2pojo.Annotator and will be used in addition to the one chosen
    // by annotationStyle. If you want to use the custom annotator alone, set annotationStyle to none.
    customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

    // Whether to include JSR-303/349 annotations (for schema rules like minimum, maximum, etc) in
    // generated Java types. Schema rules and the annotation they produce:
    //  - maximum = @DecimalMax
    //  - minimum = @DecimalMin
    //  - minItems,maxItems = @Size
    //  - minLength,maxLength = @Size
    //  - pattern = @Pattern
    //  - required = @NotNull
    // Any Java fields which are an object or array of objects will be annotated with @Valid to
    // support validation of an entire document tree.
    includeJsr303Annotations = false

    // The type of input documents that will be read. Supported values:
    //  - jsonschema (schema documents, containing formal rules that describe the structure of JSON data)
    //  - json (documents that represent an example of the kind of JSON data that the generated Java types
    //          will be mapped to)
    //  - yamlschema (JSON schema documents, represented as YAML)
    //  - yaml (documents that represent an example of the kind of YAML (or JSON) data that the generated Java types
    //          will be mapped to)
    sourceType = 'jsonschema'

    // Whether to empty the target directory before generation occurs, to clear out all source files
    // that have been generated previously. <strong>Be warned</strong>, when activated this option
    // will cause jsonschema2pojo to <strong>indiscriminately delete the entire contents of the target
    // directory (all files and folders)</strong> before it begins generating sources.
    removeOldOutput = false

    // The character encoding that should be used when writing the generated Java source files
    outputEncoding = 'UTF-8'

    // Whether to use {@link org.joda.time.DateTime} instead of {@link java.util.Date} when adding
    // date type fields to generated Java types.
    useJodaDates = false

    // Whether to add JsonFormat annotations when using Jackson 2 that cause format "date", "time", and "date-time"
    // fields to be formatted as yyyy-MM-dd, HH:mm:ss.SSS and yyyy-MM-dd'T'HH:mm:ss.SSSZ respectively. To customize these
    // patterns, use customDatePattern, customTimePattern, and customDateTimePattern config options or add these inside a
    // schema to affect an individual field
    formatDateTimes = true
    formatDates = true
    formatTimes = true

    // Whether to use commons-lang 3.x imports instead of commons-lang 2.x imports when adding equals,
    // hashCode and toString methods.
    useCommonsLang3 = false

    // Whether to initialize Set and List fields as empty collections, or leave them as null.
    initializeCollections = true

    // Whether to add a prefix to generated classes.
    classNamePrefix = ""

    // Whether to add a suffix to generated classes.
    classNameSuffix = ""

    // An array of strings that should be considered as file extensions and therefore not included in class names.
    fileExtensions = [] as String[]

    // Whether to generate constructors or not.
    includeConstructors = false

    // **EXPERIMENTAL** Whether to make the generated types Parcelable for Android
    parcelable = false

    // Whether to make the generated types Serializable
    serializable = false

    // Whether to include getters or to omit these accessor methods and create public fields instead.
    includeGetters = true

    // Whether to include setters or to omit these accessor methods and create public fields instead.
    includeSetters = true

    // Whether to include dynamic getters, setters, and builders or to omit these methods.
    includeDynamicAccessors = false

    // Whether to include dynamic getters or to omit these methods.
    includeDynamicGetters = false

    // Whether to include dynamic setters or to omit these methods.
    includeDynamicSetters = false

    // Whether to include dynamic builders or to omit these methods.
    includeDynamicBuilders = false

    // What type to use instead of string when adding string properties of format "date" to Java types
    dateType = "java.time.LocalDate"

    // What type to use instead of string when adding string properties of format "date-time" to Java types
    dateTimeType = "java.time.LocalDateTime"
}

sonarqube {
    properties {
        property "sonar.exclusions", "build/generated-sources/**/*.java," +
            "**/AppInsightsConfiguration.java," +
            "**/TestingSupportController.java"
        property "sonar.projectName", "ccd-data-store-api"
        property "sonar.projectKey", "ccd-data-store-api"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
    }
}

compileJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

compileTestJava {
    options.annotationProcessorPath = configurations.annotationProcessor
}

idea.project.settings {
    compiler {
        javac {
            javacAdditionalOptions "-parameters"
        }
    }
}

// adopted from
// https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle
jacocoTestReport {
    doFirst {
        logger.lifecycle("{} Starting jacocoTestReport ...", timestamp())
    }

    reports {
        // XML required by coveralls and for the below coverage checks
        // and html are generated by default
        xml.required = true
    }

    afterEvaluate {
        classDirectories.setFrom((classDirectories.files.collect {
            fileTree(dir: it, exclude: ['uk/gov/hmcts/ccd/domain/types/sanitiser/document/**',
                                        '**/service/doclink/**',
                                        '**/domain/model/definition/CaseEventFieldComplex**',
                                        '**/domain/model/definition/DisplayContext**'])
        }))
    }

    doLast {
        def report = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]


        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else {
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}

test {
    timeout = Duration.ofMinutes(30)
    environment("AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY", "some-key")
    generateCucumberReports.enabled = false
    systemProperty 'java.locale.providers', 'CLDR'

    useJUnitPlatform()

    jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"

    testLogging {
        // set options for log level LIFECYCLE
        events "failed"
        exceptionFormat "short"

        // set options for log level DEBUG
        debug {
            events "passed", "started", "skipped", "failed"
            exceptionFormat "full"
        }

        // remove standard output/error logging from --info builds
        // by assigning only 'failed' and 'skipped' events
        info.events = ["failed", "skipped"]
    }

    reports {
        html.required = true
        html.outputLocation = file("${buildDir}/reports/jacoco/html")
    }

    jvmArgs = [
            '--add-modules', 'java.se',
            '--add-exports', 'java.base/jdk.internal.ref=ALL-UNNAMED',
            '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
            '--add-opens', 'java.base/java.nio=ALL-UNNAMED',
            '--add-opens', 'java.base/sun.nio.ch=ALL-UNNAMED',
            '--add-opens', 'java.management/sun.management=ALL-UNNAMED',
            '--add-opens', 'jdk.management/com.sun.management.internal=ALL-UNNAMED'
    ]
}

check.dependsOn jacocoTestReport

task fortifyScan(type: JavaExec)  {
    mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

idea {
  module {
    // config to allow Intelij to mark test source and resource files correctly to help linting tools
    testSourceDirs += project.sourceSets.aat.java.srcDirs
    testSourceDirs += project.sourceSets.contractTest.java.srcDirs
    testResourceDirs += project.sourceSets.aat.resources.srcDirs
    testResourceDirs += project.sourceSets.contractTest.resources.srcDirs
  }
}

task highLevelDataSetup(type: JavaExec) {
    dependsOn aatClasses

    mainClass = "uk.gov.hmcts.ccd.datastore.befta.HighLevelDataSetupApp"
    classpath += configurations.cucumberRuntime + sourceSets.aat.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

task smoke() {
    description = 'Executes smoke tests against an the CCD Data Store API instance just deployed'
    dependsOn aatClasses

    new File("$buildDir/test-results/test").mkdirs()
    copy {
        from "src/aat/resources/DummyTest.xml"
        into "$buildDir/test-results/test"
    }

    doLast {
        generateCucumberReports.enabled = true
        javaexec {
            mainClass = "uk.gov.hmcts.ccd.datastore.befta.DataStoreBeftaMain"
            classpath += configurations.cucumberRuntime + sourceSets.aat.runtimeClasspath
            args = ['--plugin', "json:${rootDir}/target/cucumber.json",
                    '--plugin', "junit:${buildDir}/test-results/smoke/cucumber.xml",
                    '--tags', '@Smoke and not @Ignore',
                    '--glue', 'uk.gov.hmcts.befta.player',
                    '--glue', "uk.gov.hmcts.ccd.datastore.befta", 'src/aat/resources/features']
            jvmArgs = [ '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED' ]
        }
    }

    finalizedBy {
        generateCucumberReports {
            doLast{
                delete "${rootDir}/BEFTA Report for Smoke Tests/"
                new File("${rootDir}/BEFTA Report for Smoke Tests").mkdirs()
                file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Smoke Tests"))
                logger.quiet("Smoke test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Smoke%20Tests/overview-features.html")
            }
        }
    }

    outputs.upToDateWhen { false }
}

def tags = (findProperty('tags') == null) ? 'not @Ignore' : '(' + findProperty('tags') + ') and not @Ignore'

task functional(type: JavaExec) {
    description = "Executes functional tests against an the CCD Data Store API instance just deployed"
    group = "Verification"
    dependsOn aatClasses

    group = "Verification"

    generateCucumberReports.enabled = false
    mainClass = "uk.gov.hmcts.ccd.datastore.befta.DataStoreBeftaMain"
    classpath += configurations.cucumberRuntime + sourceSets.aat.runtimeClasspath + sourceSets.main.output + sourceSets.test.output
    args = [
        '--threads', '1',
        '--plugin', "json:${rootDir}/target/cucumber.json",
        '--plugin', "junit:${buildDir}/test-results/functional/cucumber.xml",
        '--tags',"${tags}",
        '--glue', 'uk.gov.hmcts.befta.player',
        '--glue', 'uk.gov.hmcts.ccd.datastore.befta',
        'src/aat/resources/features'
    ]
    // '--add-opens=...' added to suppress 'WARNING: An illegal reflective access operation has occurred' in uk.gov.hmcts.befta.util.CucumberStepAnnotationUtils
    jvmArgs '--add-opens=java.base/java.lang.reflect=ALL-UNNAMED'

    finalizedBy {
        generateCucumberReports.enabled = true
        generateCucumberReports {
            doLast{
                delete "${rootDir}/BEFTA Report for Functional Tests/"
                new File("${rootDir}/BEFTA Report for Functional Tests").mkdirs()
                file("${rootDir}/target/cucumber/cucumber-html-reports").renameTo(file("${rootDir}/BEFTA Report for Functional Tests"))
                logger.quiet("Functional test report moved to ---> file://${rootDir}/BEFTA%20Report%20for%20Functional%20Tests/overview-features.html")
            }
        }
    }

    outputs.upToDateWhen { false }
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}

def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

//task runProviderPactVerification(type:Test) {
//    logger.lifecycle("Runs provider pact Tests")
//    useJUnitPlatform()
//    testClassesDirs = sourceSets.contractTest.output.classesDirs
//    classpath = sourceSets.contractTest.runtimeClasspath
//    if (project.hasProperty('pact.verifier.publishResults')) {
//        systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
//    }
//    systemProperty 'pact.provider.version', project.pactVersion
//    include "uk/gov/hmcts/reform/**"
//    include "uk/gov/hmcts/ccd/**"
//}

//runProviderPactVerification.finalizedBy pactVerify

def timestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

cucumberReports {
    outputDir = file("${projectDir}/target/cucumber")
    reports = files("${projectDir}/target/cucumber.json")
    notFailingStatuses = ["skipped", "passed"]
}

task reloadEnvSecretsDemo {
    doFirst {
        reloadEnvSecrets("demo")
    }
}

task reloadEnvSecretsAAT {
    doFirst {
        reloadEnvSecrets("aat")
    }
}

void reloadEnvSecrets(String env) {
    if (project.file("./.${env}-remote-env").exists()) {
        project.file("./.${env}-remote-env").delete()
    }
}

task runRemoteDemo(type: JavaExec) {
    mainClass = 'uk.gov.hmcts.ccd.CoreCaseDataApplication'
    classpath = sourceSets.main.runtimeClasspath
    doFirst() {
        configRemoteRunTask(it, 'demo')
    }
}

task runRemoteAAT(type: JavaExec) {
    mainClass = 'uk.gov.hmcts.ccd.CoreCaseDataApplication'
    classpath = sourceSets.main.runtimeClasspath
    doFirst() {
        configRemoteRunTask(it, 'aat')
    }
}

rootProject.tasks.named("processAatResources") {
    duplicatesStrategy = 'include'
}

rootProject.tasks.named("processContractTestResources") {
    duplicatesStrategy = 'include'
}

void configRemoteRunTask(Task execTask, String env) {
    loadEnvSecrets(env)
    project.file("./.${env}-remote-env").readLines().each() {
        def index = it.indexOf("=")
        def key = it.substring(0, index)
        def value = it.substring(index + 1)
        execTask.environment(key, value)
    }
}

void loadEnvSecrets(String env) {
    def azCmd = ['az', 'keyvault', 'secret', 'show', '--vault-name', "ccd-${env}", '-o', 'tsv', '--query', 'value', '--name', 'data-store-remote-env']
    if (!project.file("./.${env}-remote-env").exists()) {
        new ByteArrayOutputStream().withStream { os ->
            exec {
                if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
                    commandLine ['cmd', '/c'] + azCmd
                } else {
                    commandLine azCmd
                }
                standardOutput = os
            }
            project.file("./.${env}-remote-env").write(new String(os.toString().replace('\n', '').decodeBase64(), java.nio.charset.StandardCharsets.UTF_8))
        }
    }
}
