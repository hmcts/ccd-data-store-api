buildscript {
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.1'
    }
    dependencies {
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:0.5.1'
    }
    dependencies {
        classpath 'gradle.plugin.com.github.spotbugs:gradlePlugin:1.6.0'
    }
    dependencies {
        classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.6.2'
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
    }
}

plugins {
    id 'application'
    id 'io.spring.dependency-management' version '1.0.5.RELEASE'
    id 'org.springframework.boot' version '1.5.13.RELEASE'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'org.sonarqube' version '2.6.2'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'se.patrikerdes.use-latest-versions' version '0.2.1'
    id 'org.owasp.dependencycheck' version '3.1.2'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.sonarqube'
apply plugin: 'jsonschema2pojo'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'pmd'
apply plugin: 'com.github.spotbugs'
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'se.patrikerdes.use-latest-versions'
apply plugin: 'org.owasp.dependencycheck'

apply from: 'liquibase.gradle'

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            // Wiremock requires old jetty because it still support java 7
            // spring bom is currenty upgrading it
            if (details.requested.group == 'org.eclipse.jetty') {
                details.useVersion '9.2.24.v20180105'
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

mainClassName = 'uk.gov.hmcts.ccd.CoreCaseDataApplication'

// tag::repositories[]
repositories {
// https://github.com/hmcts/java-logging/blob/master/java-logging-appinsights/README.md
    maven {
        url  'https://dl.bintray.com/hmcts/hmcts-maven'
    }
    mavenLocal()
    jcenter()
}
// end::repositories[]

ext {
    junitVersion = '4.12'
    junitJupiterVersion = '5.1.1'
    junitVintageVersion = '5.1.1'
    junitPlatformVersion = '1.1.1'
    hibernateVersion = '5.2.16.Final'
    reformLogging = '2.2.1'
    swagger2Version = '2.9.0'
    limits = [
            'instruction': 84,
            'branch'     : 72,  // TODO needs code update
            'line'       : 85,
            'complexity' : 80,
            'method'     : 88,
            'class'      : 88
    ]
    appInsights= '2.0.1'
}

group 'uk.gov.hmcts.ccd'
version '1.2.0-SNAPSHOT'

// tag::jar[]
jar {
    baseName = 'core-case-data'
    manifest {
        attributes 'Implementation-Title': project.name,
                'Implementation-Version': project.version
    }
    configurations {
        jar.archiveName = 'core-case-data.jar'
    }
}

// end::jar[]

// tag::dependencies[]
sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
    providedRuntime
//    runtime.exclude group: 'com.microsoft.azure', module: 'applicationinsights-agent'

    aatCompile.extendsFrom(testCompile)
    aatRuntime.extendsFrom(testRuntime)
}

junitPlatform {
    enableStandardTestTask true
}

checkstyle {
    maxWarnings = 99999  // In the Ideal world this should be 0
    toolVersion = '8.8'
}

checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleTest)

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

// Delete me once there is no more bug
spotbugs {
    ignoreFailures = true
}

dependencies {
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: reformLogging
    compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: reformLogging
    compileOnly 'org.projectlombok:lombok:1.16.20'

    // Needs to explicitly bring in a different hibernate version as in pom.xml
    compile "org.hibernate:hibernate-core:${hibernateVersion}"
    compile "org.hibernate:hibernate-entitymanager:${hibernateVersion}"

    compile("org.springframework.boot:spring-boot-starter")

    compile("org.springframework.boot:spring-boot-starter-data-jpa") {
        exclude group: 'org.hibernate', module: 'hibernate-core'
        exclude group: 'org.hibernate', module: 'hibernate-entitymanager'
    }

    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc') {
        exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc'
    }
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile group: 'com.hazelcast', name: 'hazelcast'
    compile group: 'com.hazelcast', name: 'hazelcast-spring'

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    compile("org.springframework.boot:spring-boot-starter-web")
    compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.2.RELEASE'
    compile group: 'javax.inject', name: 'javax.inject', version: '1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: swagger2Version
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: swagger2Version
    compile group: 'org.liquibase', name: 'liquibase-core', version: '3.5.5'
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.5'
    compile group: 'uk.gov.hmcts.reform.auth', name: 'auth-checker-lib', version: '2.1.2'
    compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '0.6.0'
    compile group: 'com.sun.mail', name: 'mailapi', version: '1.6.1'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'


    // FIXME 0.6 doesn't support jsonb; 0.7 doesn't work on Windows
//    runtime group: 'com.impossibl.pgjdbc-ng', name: 'pgjdbc-ng', version: '0.6'
    runtime group: 'org.postgresql', name: 'postgresql', version: '42.2.2'
    runtime group: 'com.zaxxer', name: 'HikariCP', version: '2.7.9'

    testCompile "junit:junit"
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testCompile group: 'com.opentable.components', name: 'otj-pg-embedded', version: '0.11.4'
    testCompile group: 'com.github.tomakehurst', name: 'wiremock', version: '2.17.0'
    testCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '1.2.4.RELEASE'
    // To avoid compiler warnings about @API annotations in JUnit5 code.
    testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'
    testCompile "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
    testCompile "org.junit.platform:junit-platform-suite-api:${junitPlatformVersion}"
    testCompile "org.junit.platform:junit-platform-runner:${junitPlatformVersion}"
    testRuntime "org.junit.platform:junit-platform-launcher:${junitPlatformVersion}"
    testRuntime "org.junit.vintage:junit-vintage-engine:${junitVintageVersion}"
    testCompile group: 'org.mockito', name: 'mockito-core', version: '1.10.19'
    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.1.0'
    testCompile group: 'com.xebialabs.restito', name: 'restito', version: '0.9.3'
    testCompile 'io.github.openfeign:feign-jackson:9.7.0'

    // for sonar analysis
    testCompile group: 'org.openid4java', name: 'openid4java', version: '1.0.0'
    // remove me once insights is in
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
}
// end::dependencies[]

// tag::wrapper[]
task wrapper(type: Wrapper) {
    gradleVersion = '4.6'
}
// end::wrapper[]

task projectVersion {
    description 'Prints the version of this project; used for publishing JAR file'
    doLast {
        print project.version
    }
}

// copied from https://github.com/joelittlejohn/jsonschema2pojo/tree/master/jsonschema2pojo-gradle-plugin
// Note A problem was found with the configuration of task ':generateJsonSchema2Pojo'.
// Registering invalid inputs and outputs via TaskInputs and TaskOutputs methods has been deprecated
// and is scheduled to be removed in Gradle 5.0.
jsonSchema2Pojo {

    // Whether to allow 'additional' properties to be supported in classes by adding a map to
    // hold these. This is true by default, meaning that the schema rule 'additionalProperties'
    // controls whether the map is added. Set this to false to globabally disable additional properties.
    includeAdditionalProperties = true

    // Whether to generate builder-style methods of the form withXxx(value) (that return this),
    // alongside the standard, void-return setters.
    generateBuilders = false

    // Whether to use primitives (long, double, boolean) instead of wrapper types where possible
    // when generating bean properties (has the side-effect of making those properties non-null).
    usePrimitives = false

    // Location of the JSON Schema file(s). This may refer to a single file or a directory of files.
    source = files("${sourceSets.main.output.resourcesDir}/schema")

    // Target directory for generated Java source files. The plugin will add this directory to the
    // java source set so the compiler will find and compile the newly generated source files.
    targetDirectory = file("${project.buildDir}/generated-sources/js2p")

    // Package name used for generated Java classes (for types where a fully qualified name has not
    // been supplied in the schema using the 'javaType' property).
    targetPackage = 'uk.gov.hmcts.ccd.domain.types.sanitiser.document'

    // The characters that should be considered as word delimiters when creating Java Bean property
    // names from JSON property names. If blank or not set, JSON properties will be considered to
    // contain a single word when creating Java Bean property names.
    propertyWordDelimiters = [] as char[]

    // Whether to use the java type long (or Long) instead of int (or Integer) when representing the
    // JSON Schema type 'integer'.
    useLongIntegers = false

    // Whether to use the java type BigInteger when representing the JSON Schema type 'integer'. Note
    // that this configuration overrides useLongIntegers
    useBigIntegers = false

    // Whether to use the java type double (or Double) instead of float (or Float) when representing
    // the JSON Schema type 'number'.
    useDoubleNumbers = true

    // Whether to use the java type BigDecimal when representing the JSON Schema type 'number'. Note
    // that this configuration overrides useDoubleNumbers
    useBigDecimals = false

    // Whether to include hashCode and equals methods in generated Java types.
    includeHashcodeAndEquals = true

    // Whether to include a toString method in generated Java types.
    includeToString = true

    // The style of annotations to use in the generated Java types. Supported values:
    //  - jackson (alias of jackson2)
    //  - jackson2 (apply annotations from the Jackson 2.x library)
    //  - jackson1 (apply annotations from the Jackson 1.x library)
    //  - gson (apply annotations from the Gson library)
    //  - moshi1 (apply annotations from the Moshi 1.x library)
    //  - none (apply no annotations at all)
    annotationStyle = 'jackson'

    // A fully qualified class name, referring to a custom annotator class that implements
    // org.jsonschema2pojo.Annotator and will be used in addition to the one chosen
    // by annotationStyle. If you want to use the custom annotator alone, set annotationStyle to none.
    customAnnotator = 'org.jsonschema2pojo.NoopAnnotator'

    // Whether to include JSR-303/349 annotations (for schema rules like minimum, maximum, etc) in
    // generated Java types. Schema rules and the annotation they produce:
    //  - maximum = @DecimalMax
    //  - minimum = @DecimalMin
    //  - minItems,maxItems = @Size
    //  - minLength,maxLength = @Size
    //  - pattern = @Pattern
    //  - required = @NotNull
    // Any Java fields which are an object or array of objects will be annotated with @Valid to
    // support validation of an entire document tree.
    includeJsr303Annotations = false

    // The type of input documents that will be read. Supported values:
    //  - jsonschema (schema documents, containing formal rules that describe the structure of JSON data)
    //  - json (documents that represent an example of the kind of JSON data that the generated Java types
    //          will be mapped to)
    //  - yamlschema (JSON schema documents, represented as YAML)
    //  - yaml (documents that represent an example of the kind of YAML (or JSON) data that the generated Java types
    //          will be mapped to)
    sourceType = 'jsonschema'

    // Whether to empty the target directory before generation occurs, to clear out all source files
    // that have been generated previously. <strong>Be warned</strong>, when activated this option
    // will cause jsonschema2pojo to <strong>indiscriminately delete the entire contents of the target
    // directory (all files and folders)</strong> before it begins generating sources.
    removeOldOutput = false

    // The character encoding that should be used when writing the generated Java source files
    outputEncoding = 'UTF-8'

    // Whether to use {@link org.joda.time.DateTime} instead of {@link java.util.Date} when adding
    // date type fields to generated Java types.
    useJodaDates = false

    // Whether to add JsonFormat annotations when using Jackson 2 that cause format "date", "time", and "date-time"
    // fields to be formatted as yyyy-MM-dd, HH:mm:ss.SSS and yyyy-MM-dd'T'HH:mm:ss.SSSZ respectively. To customize these
    // patterns, use customDatePattern, customTimePattern, and customDateTimePattern config options or add these inside a
    // schema to affect an individual field
    formatDateTimes = true
    formatDates = true
    formatTimes = true

    // Whether to use commons-lang 3.x imports instead of commons-lang 2.x imports when adding equals,
    // hashCode and toString methods.
    useCommonsLang3 = false

    // Whether to initialize Set and List fields as empty collections, or leave them as null.
    initializeCollections = true

    // Whether to add a prefix to generated classes.
    classNamePrefix = ""

    // Whether to add a suffix to generated classes.
    classNameSuffix = ""

    // An array of strings that should be considered as file extensions and therefore not included in class names.
    fileExtensions = [] as String[]

    // Whether to generate constructors or not.
    includeConstructors = false

    // **EXPERIMENTAL** Whether to make the generated types Parcelable for Android
    parcelable = false

    // Whether to make the generated types Serializable
    serializable = false

    // Whether to include getters/setters or to omit these accessor methods and create public fields instead.
    includeAccessors = true

    // Whether to include getters or to omit these accessor methods and create public fields instead.
    includeGetters = false

    // Whether to include setters or to omit these accessor methods and create public fields instead.
    includeSetters = false

    // Whether to include dynamic getters, setters, and builders or to omit these methods.
    includeDynamicAccessors = false

    // Whether to include dynamic getters or to omit these methods.
    includeDynamicGetters = false

    // Whether to include dynamic setters or to omit these methods.
    includeDynamicSetters = false

    // Whether to include dynamic builders or to omit these methods.
    includeDynamicBuilders = false

    // What type to use instead of string when adding string properties of format "date" to Java types
    dateType = "java.time.LocalDate"

    // What type to use instead of string when adding string properties of format "date-time" to Java types
    dateTimeType = "java.time.LocalDateTime"
}

jacoco {
    toolVersion = "0.8.0"
}

project.afterEvaluate {
    def junitPlatformTestTask = project.tasks.getByName('junitPlatformTest')

    // configure jacoco to analyze the junitPlatformTest task
    jacoco {
        // IDE may give warning but this is required for now, for the world of Junit5, Gradle and sonar
        applyTo junitPlatformTestTask
    }

    // create junit platform jacoco task
    project.task(type: JacocoReport, "junitPlatformJacocoReport",
            {
                executionData junitPlatformTestTask
            })
}

sonarqube {
    properties {
        property "sonar.exclusions", "build/generated-sources/**/*.java"
        property "sonar.coverage.exclusions", "src/main/java/uk/gov/hmcts/ccd/data/definition/DefaultCaseDefinitionRepository.java,src/main/java/uk/gov/hmcts/ccd/AppInsights.java"
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/junitPlatformTest.exec"
        property "sonar.junit.reportPaths", "${project.buildDir}/test-results/junit-platform"
        property "sonar.projectName", "ccd-data-store-api"
        property "sonar.projectKey", "ccd-data-store-api"
    }
}

// adopted from
// https://github.com/springfox/springfox/blob/fb780ee1f14627b239fba95730a69900b9b2313a/gradle/coverage.gradle
jacocoTestReport {
    doFirst {
        logger.lifecycle("{} Starting jacocoTestReport ...", timestamp())
    }

    reports {
        // XML required by coveralls and for the below coverage checks
        // and html are generated by default
        xml.enabled true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['uk/gov/hmcts/ccd/domain/types/sanitiser/document/**'])
        })
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]


        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else{
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}

junitPlatformTest {
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "some-key")
    doFirst {
        logger.lifecycle("junit platform test cases started {}", timestamp())
    }
    doLast {
        logger.lifecycle("junit platform test cases finished {}", timestamp())
    }
}

test {
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "some-key")
    doFirst {
        logger.lifecycle("junit 4 test cases started {}", timestamp())
    }
    doLast {
        logger.lifecycle("junit 4 test cases finished {}", timestamp())
    }
}

check.dependsOn jacocoTestReport

sourceSets {
    aat {
        java {
            srcDir('src/aat/java')
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
        resources {
            srcDir('src/aat/resources')
        }
    }
}
task smoke(type: Test) {
    systemProperty "http.proxyHost", System.getProperty('http.proxyHost')
    systemProperty "http.proxyPort", System.getProperty('http.proxyPort')
    systemProperty "https.proxyHost", System.getProperty('https.proxyHost')
    systemProperty "https.proxyPort", System.getProperty('https.proxyPort')

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "some-key")

    group = 'Delivery pipeline'
    description = 'Executes smoke tests against an AAT CCD Data Store instance'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/ccd/datastore/tests/functional/**"
    useJUnitPlatform {
        includeTags 'smoke'
    }

}

task functional(type: Test) {
    systemProperty "http.proxyHost", System.getProperty('http.proxyHost')
    systemProperty "http.proxyPort", System.getProperty('http.proxyPort')
    systemProperty "https.proxyHost", System.getProperty('https.proxyHost')
    systemProperty "https.proxyPort", System.getProperty('https.proxyPort')

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "some-key")

    group = 'Delivery pipeline'
    description = 'Executes functional tests against an AAT CCD Data Store instance'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/ccd/datastore/tests/functional/**"
    useJUnitPlatform()
}


def timestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

//distributions {
//    main {
//        contents {
//            from(file("$projectDir/src/main/resources/AI-Agent.xml")) {
//                into "lib"
//            }
//        }
//    }
//}

// for cnp pipeline
task dependencyCheck(dependsOn: dependencyCheckAnalyze)

configurations { codacy }
repositories {
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}
dependencies {
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'
}
task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}


