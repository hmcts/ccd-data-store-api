import groovy.util.slurpersupport.GPathResult
import groovy.xml.DOMBuilder
import groovy.xml.XmlUtil
import org.w3c.dom.Document
import org.w3c.dom.Element
import org.w3c.dom.Node
import org.w3c.dom.NodeList

import javax.xml.xpath.XPathConstants
import javax.xml.xpath.XPathExpression
import javax.xml.xpath.XPathFactory

void suppressCves(reportName) {
    reportName  = reportName == null || reportName as String == "" ? "dependency-check-report.xml" : reportName as String
    def reportFile = new File(project.file(dependencyCheck.getOutputDirectory()), reportName)
    if (!reportFile.isFile()) {
        throw new FileNotFoundException("Report file not found.\n" +
                "\nPossible Solution: run :dependencyCheckAnalyze")
    }

    GPathResult report = new XmlSlurper().parse(new FileReader(reportFile))
    Set<String> unSuppressedCves = report.'**'
                                    .findAll { node -> node.name() == 'vulnerability' }
                                    .collect { it.name.text() } as Set<String>
    if (!unSuppressedCves.isEmpty()) {
        File suppressionsFile = project.file(dependencyCheck.getSuppressionFile())
        String suppressionXml = readFile(suppressionsFile)
        Element suppressionsDoc = DOMBuilder.parse(new StringReader(suppressionXml)).getDocumentElement()
        addNewSuppressions(unSuppressedCves, suppressionsDoc)
        suppressionsFile.write(XmlUtil.serialize(formatXml(suppressionsDoc)))
    }
}

static void addNewSuppressions(unSuppressedCves, suppressions) {
    unSuppressedCves.each {
        String cveName = it
        Document document = suppressions.getOwnerDocument()
        Element notesTag = document.createElement("notes")
        notesTag.appendChild(document.createTextNode("Ticket TBC"))
        Element cveTag = document.createElement("cve")
        cveTag.appendChild(document.createTextNode(cveName))

        Element suppressTag = document.createElement("suppress")
        suppressTag.appendChild(notesTag)
        suppressTag.appendChild(cveTag)
        suppressions.appendChild(suppressTag)
    }
}

static String readFile(File file) {
    return new String(new FileInputStream(file.path).readAllBytes(), "UTF-8")
}

static def formatXml(Element suppressions) {
    // Strip out all whitespace.
    XPathExpression xpathExp = XPathFactory.newInstance().newXPath().compile(
            "//text()[normalize-space(.) = '']")

    NodeList emptyTextNodes = xpathExp.evaluate(suppressions, XPathConstants.NODESET) as NodeList
    if (emptyTextNodes.getLength()) {
        for (int i = 0; i < emptyTextNodes.getLength(); i++) {
            Node emptyTextNode = emptyTextNodes.item(i)
            emptyTextNode.getParentNode().removeChild(emptyTextNode)
        }
    }
    return suppressions
}

task suppressCves() {
    doLast {suppressCves("")}
}
