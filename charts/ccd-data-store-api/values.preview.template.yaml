java:
  image: ${IMAGE_NAME}
  ingressHost: ${SERVICE_FQDN}
  keyVaults:
    ccd:
      resourceGroup: ccd-shared
      secrets:
        - name: data-store-api-draft-key
          alias: CCD_DRAFT_ENCRYPTION_KEY
        - name: ccd-data-s2s-secret
          alias: DATA_STORE_IDAM_KEY
        - name: idam-data-store-client-secret
          alias: IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET
        - name: idam-data-store-system-user-username
          alias: IDAM_DATA_STORE_SYSTEM_USER_USERNAME
        - name: idam-data-store-system-user-password
          alias: IDAM_DATA_STORE_SYSTEM_USER_PASSWORD
  environment:
    AZURE_APPLICATIONINSIGHTS_INSTRUMENTATIONKEY: "2dcb834e-768e-4429-9050-ab15af959995"
    DATA_STORE_DB_HOST: "{{ .Release.Name }}-postgresql"
    DATA_STORE_DB_NAME: "{{ .Values.postgresql.postgresqlDatabase}}"
    DATA_STORE_DB_USERNAME: "{{ .Values.postgresql.postgresqlUsername}}"
    DATA_STORE_DB_PASSWORD: "{{ .Values.postgresql.postgresqlPassword}}"
    DATA_STORE_DB_OPTIONS: "?stringtype=unspecified"
    DATA_STORE_DB_MAX_POOL_SIZE: 10
    DEFINITION_STORE_HOST: http://ccd-definition-store-api-pr-1119.service.core-compute-preview.internal/
    USER_PROFILE_HOST: http://ccd-user-profile-api-pr-399.service.core-compute-preview.internal/
    ELASTIC_SEARCH_ENABLED: true # enable whenever ES required on a particular PR
    ELASTIC_SEARCH_NODES_DISCOVERY_ENABLED: true
    ELASTIC_SEARCH_HOSTS: "{{ .Release.Name }}-es-master:9200"
    ELASTIC_SEARCH_DATA_NODES_HOSTS: "http://{{ .Release.Name }}-es-master:9200"
    LOGGING_LEVEL_UK_GOV_HMCTS_CCD_SECURITY_IDAM: DEBUG
    LOG_CALLBACK_DETAILS:
  postgresql:
    enabled: true

elastic:
  enabled: true # enable whenever required on a particular PR

elasticsearch:
  clusterName: "es"
  imageTag: "7.11.1"
  replicas: 1
  minimumMasterNodes: 1
  antiAffinity: "soft"
  esJavaOpts: "-Xmx512m -Xms512m"
  extraEnvs:
    - name: discovery.type
      value: single-node
    - name: cluster.initial_master_nodes
      value: ""
    - name: action.auto_create_index
      value: .security*,.watches,.triggered_watches,.watcher-history-*,.logstash_dead_letter,.ml*
  persistence:
    enabled: false
  ingress:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: traefik
    path: /
    hosts:
      - es-${SERVICE_FQDN}
logstash:
  image: "hmctspublic.azurecr.io/imported/logstash/logstash"
  imageTag: "7.16.1"
  imagePullPolicy: "IfNotPresent"
  logstashJavaOpts: "-Xmx1g -Xms512M"
  extraInitContainers: |
    - name: download-postgres-jdbc
      image: hmctspublic.azurecr.io/curl:7.70.0
      command: ['curl', '-L', 'https://jdbc.postgresql.org/download/postgresql-42.2.18.jar', '-o', '/logstash-lib/postgresql.jar']
      volumeMounts:
      - name: logstash-lib
        mountPath: /logstash-lib
  extraVolumes: |
    - name: logstash-lib
      emptyDir: {}
  extraVolumeMounts: |
    - name: logstash-lib
      mountPath: /usr/share/logstash/ccd
  logstashConfig:
    logstash.yml: |
      http.host: 0.0.0.0
      xpack.monitoring.enabled: false
      xpack.monitoring.elasticsearch.hosts: ["http://{{ .Release.Name }}-es-master:9200"]
      queue.type: persisted
      dead_letter_queue.enable: true
    pipelines.yml: |
      - pipeline.id: main
        path.config: "/usr/share/logstash/pipeline/{01_input,02_filter,03_output}.conf"
        queue.type: persisted
  logstashPipeline:
    01_input.conf: |
      input  {
        jdbc {
          jdbc_connection_string => "jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/javadatabase?stringtype=unspecified"
          jdbc_user => "javapostgres"
          jdbc_password => "javapassword"
          jdbc_validate_connection => true
          jdbc_driver_library => "/usr/share/logstash/ccd/postgresql.jar"
          jdbc_driver_class => "org.postgresql.Driver"
          jdbc_default_timezone => "UTC"
          statement => "UPDATE case_data SET marked_by_logstash = true WHERE marked_by_logstash = false RETURNING id, created_date, last_modified, jurisdiction, case_type_id, state, last_state_modified_date, data::TEXT as json_data, data_classification::TEXT as json_data_classification, reference, security_classification, supplementary_data::TEXT as json_supplementary_data"
          clean_run => false
          schedule => "* * * * * *"
        }
      }
    02_filter.conf: |
      filter{
        json{
            source => "json_data"
            target => "data"
            remove_field => ["json_data"]
            }
            json{
                source => "json_supplementary_data"
                target => "supplementary_data"
                remove_field => ["json_supplementary_data"]
            }
            json{
                source => "json_data_classification"
                target => "data_classification"
                remove_field => ["json_data_classification"]
            }
            if [data][SearchCriteria] {
                clone {
                    clones => ["SearchCriteria"]
                }
            }
            if [type] == "SearchCriteria" {
                if [data][SearchCriteria] {
                    mutate {
                      rename => {"[data][SearchCriteria]" => "[data_new][SearchCriteria]" }
                    }
                }
                if [data][caseManagementLocation] {
                    mutate {
                      rename => {"[data][caseManagementLocation]" => "[data_new][caseManagementLocation]" }
                    }
                }
                if [data][CaseAccessCategory] {
                  mutate {
                      rename => {"[data][CaseAccessCategory]" => "[data_new][CaseAccessCategory]" }
                  }
                }
                if [data][caseNameHmctsInternal] {
                    mutate {
                      rename => {"[data][caseNameHmctsInternal]" => "[data_new][caseNameHmctsInternal]" }
                    }
                }
                if [data][caseManagementCategory] {
                    mutate {
                      rename => {"[data][caseManagementCategory]" => "[data_new][caseManagementCategory]" }
                    }
                }
                if [supplementary_data][HMCTSServiceId] {
                    mutate {
                      rename => {"[supplementary_data][HMCTSServiceId]" => "[supplementary_data_new][HMCTSServiceId]" }
                    }
                }
                if [data_classification][SearchCriteria] {
                    mutate {
                      rename => {"[data_classification][SearchCriteria]" => "[data_classification_new][SearchCriteria]" }
                    }
                }
                if [data_classification][CaseAccessCategory] {
                  mutate {
                        rename => {"[data_classification][CaseAccessCategory]" => "[data_classification_new][CaseAccessCategory]" }
                  }
                }
                if [data_classification][caseManagementLocation] {
                  mutate {
                      rename => {"[data_classification][caseManagementLocation]" => "[data_classification_new][caseManagementLocation]" }
                  }
                }
                if [data_classification][caseNameHmctsInternal] {
                    mutate {
                      rename => {"[data_classification][caseNameHmctsInternal]" => "[data_classification_new][caseNameHmctsInternal]" }
                    }
                }
                if [data_classification][caseManagementCategory] {
                    mutate {
                      rename => {"[data_classification][caseManagementCategory]" => "[data_classification_new][caseManagementCategory]" }
                    }
                }
                mutate { remove_field =>[ "data" ,"supplementary_data", "data_classification", "last_state_modified_date", "type","last_modified", "created_date" ] }
                mutate {
                        rename => { "[data_new]" => "data" }
                        rename => { "[supplementary_data_new]"  => "supplementary_data" }
                        rename => { "[data_classification_new]"  => "data_classification" }
                }
                mutate {
                  add_field => { "index_id" => "global_search" }
                }
                mutate {
                  lowercase => [ "index_id" ]
                }
            } else {
                mutate {
                    add_field => { "index_id" => "%{case_type_id}_cases" }
              }
            mutate {
              lowercase => [ "index_id" ]
            }
            }
      }
    03_output.conf: |
      output {
          elasticsearch {
              hosts => ["http://{{ .Release.Name }}-es-master:9200"]
              sniffing => false
              index => "%{[index_id]}"
              document_type => "_doc"
              document_id => "%{id}"
              timeout => 60
          }
      }
